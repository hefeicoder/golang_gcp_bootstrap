syntax = "proto3";

package api.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/your-org/golang-grpc-gke/gen/api/v1;apiv1";

// GrpcService provides a modern gRPC API
service GrpcService {
  // GetHealth returns the health status of the service
  rpc GetHealth(GetHealthRequest) returns (GetHealthResponse);

  // GetInfo returns information about the service
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse);

  // ProcessData processes some data and returns a result
  rpc ProcessData(ProcessDataRequest) returns (ProcessDataResponse);

  // StreamData streams data processing results
  rpc StreamData(StreamDataRequest) returns (stream StreamDataResponse);
}

// GetHealthRequest is the request for GetHealth
message GetHealthRequest {}

// GetHealthResponse is the response for GetHealth
message GetHealthResponse {
  string status = 1;
  google.protobuf.Timestamp timestamp = 2;
  map<string, string> details = 3;
}

// GetInfoRequest is the request for GetInfo
message GetInfoRequest {}

// GetInfoResponse is the response for GetInfo
message GetInfoResponse {
  string version = 1;
  string environment = 2;
  google.protobuf.Timestamp start_time = 3;
  map<string, string> metadata = 4;
}

// ProcessDataRequest is the request for ProcessData
message ProcessDataRequest {
  string data = 1;
  map<string, string> options = 2;
}

// ProcessDataResponse is the response for ProcessData
message ProcessDataResponse {
  string result = 1;
  bool success = 2;
  string error_message = 3;
  google.protobuf.Timestamp processed_at = 4;
}

// StreamDataRequest is the request for StreamData
message StreamDataRequest {
  string query = 1;
  int32 limit = 2;
}

// StreamDataResponse is the response for StreamData
message StreamDataResponse {
  string data = 1;
  int32 sequence = 2;
  google.protobuf.Timestamp timestamp = 3;
}
