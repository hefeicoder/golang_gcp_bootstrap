// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/grpc_service.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	api "github.com/your-org/golang-grpc-gke/gen/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GrpcServiceName is the fully-qualified name of the GrpcService service.
	GrpcServiceName = "api.v1.GrpcService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GrpcServiceGetHealthProcedure is the fully-qualified name of the GrpcService's GetHealth RPC.
	GrpcServiceGetHealthProcedure = "/api.v1.GrpcService/GetHealth"
	// GrpcServiceGetInfoProcedure is the fully-qualified name of the GrpcService's GetInfo RPC.
	GrpcServiceGetInfoProcedure = "/api.v1.GrpcService/GetInfo"
	// GrpcServiceProcessDataProcedure is the fully-qualified name of the GrpcService's ProcessData RPC.
	GrpcServiceProcessDataProcedure = "/api.v1.GrpcService/ProcessData"
	// GrpcServiceStreamDataProcedure is the fully-qualified name of the GrpcService's StreamData RPC.
	GrpcServiceStreamDataProcedure = "/api.v1.GrpcService/StreamData"
)

// GrpcServiceClient is a client for the api.v1.GrpcService service.
type GrpcServiceClient interface {
	// GetHealth returns the health status of the service
	GetHealth(context.Context, *connect_go.Request[api.GetHealthRequest]) (*connect_go.Response[api.GetHealthResponse], error)
	// GetInfo returns information about the service
	GetInfo(context.Context, *connect_go.Request[api.GetInfoRequest]) (*connect_go.Response[api.GetInfoResponse], error)
	// ProcessData processes some data and returns a result
	ProcessData(context.Context, *connect_go.Request[api.ProcessDataRequest]) (*connect_go.Response[api.ProcessDataResponse], error)
	// StreamData streams data processing results
	StreamData(context.Context, *connect_go.Request[api.StreamDataRequest]) (*connect_go.ServerStreamForClient[api.StreamDataResponse], error)
}

// NewGrpcServiceClient constructs a client for the api.v1.GrpcService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGrpcServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GrpcServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &grpcServiceClient{
		getHealth: connect_go.NewClient[api.GetHealthRequest, api.GetHealthResponse](
			httpClient,
			baseURL+GrpcServiceGetHealthProcedure,
			opts...,
		),
		getInfo: connect_go.NewClient[api.GetInfoRequest, api.GetInfoResponse](
			httpClient,
			baseURL+GrpcServiceGetInfoProcedure,
			opts...,
		),
		processData: connect_go.NewClient[api.ProcessDataRequest, api.ProcessDataResponse](
			httpClient,
			baseURL+GrpcServiceProcessDataProcedure,
			opts...,
		),
		streamData: connect_go.NewClient[api.StreamDataRequest, api.StreamDataResponse](
			httpClient,
			baseURL+GrpcServiceStreamDataProcedure,
			opts...,
		),
	}
}

// grpcServiceClient implements GrpcServiceClient.
type grpcServiceClient struct {
	getHealth   *connect_go.Client[api.GetHealthRequest, api.GetHealthResponse]
	getInfo     *connect_go.Client[api.GetInfoRequest, api.GetInfoResponse]
	processData *connect_go.Client[api.ProcessDataRequest, api.ProcessDataResponse]
	streamData  *connect_go.Client[api.StreamDataRequest, api.StreamDataResponse]
}

// GetHealth calls api.v1.GrpcService.GetHealth.
func (c *grpcServiceClient) GetHealth(ctx context.Context, req *connect_go.Request[api.GetHealthRequest]) (*connect_go.Response[api.GetHealthResponse], error) {
	return c.getHealth.CallUnary(ctx, req)
}

// GetInfo calls api.v1.GrpcService.GetInfo.
func (c *grpcServiceClient) GetInfo(ctx context.Context, req *connect_go.Request[api.GetInfoRequest]) (*connect_go.Response[api.GetInfoResponse], error) {
	return c.getInfo.CallUnary(ctx, req)
}

// ProcessData calls api.v1.GrpcService.ProcessData.
func (c *grpcServiceClient) ProcessData(ctx context.Context, req *connect_go.Request[api.ProcessDataRequest]) (*connect_go.Response[api.ProcessDataResponse], error) {
	return c.processData.CallUnary(ctx, req)
}

// StreamData calls api.v1.GrpcService.StreamData.
func (c *grpcServiceClient) StreamData(ctx context.Context, req *connect_go.Request[api.StreamDataRequest]) (*connect_go.ServerStreamForClient[api.StreamDataResponse], error) {
	return c.streamData.CallServerStream(ctx, req)
}

// GrpcServiceHandler is an implementation of the api.v1.GrpcService service.
type GrpcServiceHandler interface {
	// GetHealth returns the health status of the service
	GetHealth(context.Context, *connect_go.Request[api.GetHealthRequest]) (*connect_go.Response[api.GetHealthResponse], error)
	// GetInfo returns information about the service
	GetInfo(context.Context, *connect_go.Request[api.GetInfoRequest]) (*connect_go.Response[api.GetInfoResponse], error)
	// ProcessData processes some data and returns a result
	ProcessData(context.Context, *connect_go.Request[api.ProcessDataRequest]) (*connect_go.Response[api.ProcessDataResponse], error)
	// StreamData streams data processing results
	StreamData(context.Context, *connect_go.Request[api.StreamDataRequest], *connect_go.ServerStream[api.StreamDataResponse]) error
}

// NewGrpcServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGrpcServiceHandler(svc GrpcServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	grpcServiceGetHealthHandler := connect_go.NewUnaryHandler(
		GrpcServiceGetHealthProcedure,
		svc.GetHealth,
		opts...,
	)
	grpcServiceGetInfoHandler := connect_go.NewUnaryHandler(
		GrpcServiceGetInfoProcedure,
		svc.GetInfo,
		opts...,
	)
	grpcServiceProcessDataHandler := connect_go.NewUnaryHandler(
		GrpcServiceProcessDataProcedure,
		svc.ProcessData,
		opts...,
	)
	grpcServiceStreamDataHandler := connect_go.NewServerStreamHandler(
		GrpcServiceStreamDataProcedure,
		svc.StreamData,
		opts...,
	)
	return "/api.v1.GrpcService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GrpcServiceGetHealthProcedure:
			grpcServiceGetHealthHandler.ServeHTTP(w, r)
		case GrpcServiceGetInfoProcedure:
			grpcServiceGetInfoHandler.ServeHTTP(w, r)
		case GrpcServiceProcessDataProcedure:
			grpcServiceProcessDataHandler.ServeHTTP(w, r)
		case GrpcServiceStreamDataProcedure:
			grpcServiceStreamDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGrpcServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGrpcServiceHandler struct{}

func (UnimplementedGrpcServiceHandler) GetHealth(context.Context, *connect_go.Request[api.GetHealthRequest]) (*connect_go.Response[api.GetHealthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.GrpcService.GetHealth is not implemented"))
}

func (UnimplementedGrpcServiceHandler) GetInfo(context.Context, *connect_go.Request[api.GetInfoRequest]) (*connect_go.Response[api.GetInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.GrpcService.GetInfo is not implemented"))
}

func (UnimplementedGrpcServiceHandler) ProcessData(context.Context, *connect_go.Request[api.ProcessDataRequest]) (*connect_go.Response[api.ProcessDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.GrpcService.ProcessData is not implemented"))
}

func (UnimplementedGrpcServiceHandler) StreamData(context.Context, *connect_go.Request[api.StreamDataRequest], *connect_go.ServerStream[api.StreamDataResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.GrpcService.StreamData is not implemented"))
}
